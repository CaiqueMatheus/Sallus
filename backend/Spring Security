### Funcionalidades Adicionadas

01. Login com HTTP Basic.
02. Login com página HTML gerada pelo Spring Security.
03. Login com pagina customizada.
04. Proteger páginas de sistema
05. Configurando permissão para usuários.
06. Proteger itens do menu.
07. Buscando usuário da base de dados.
08. Criando uma implementação de UserDetailService
09. Exibindo o nome do usuário na página HTML.
10. Configurando o "remember-me"
11. Logout


/*package org.generation.brazil.eCommerce.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.crypto.password.PasswordEncoder;
import javax.sql.DataSource;

@Configuration
public class JdbcSecurityConfig {

    public static final String USUARIO_POR_LOGIN = "SELECT login, senha, ativo, nome FROM usuario"
            + "WHERE login = ?";

    public static final String PERMISSOES_POR_USUARIO = "SELECT u.login, p.nome as nome_permissao FROM usuario_permissao up"
            + "JOIN usuario u ON u.id = up.usuario_id"
            + "JOIN permissao p ON p.id = up.permissao_id"
            + "WHERE u.login = ?";

    public static final String PERMISSOES_POR_GRUPO = "SEÇECT g.id, g.nome, p.nome as nome_premissao FROM grupo_premissao gp"
            + "JOIN grupo g ON g.id = gp.grupo_id"
            + "JOIN permissao p on p.id = gp.permissao_id"
            + "JOIN usuario_grupo ug ON ug.grupo_id = g.id"
            + "JOIN usuario u ON u.id = ug.usuario_id"
            + "WHERE u.login =?";


    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder builder,
                                PasswordEncoder passwordEncoder,
                                DataSource dataSource) throws Exception{
        builder.jdbcAuthentication()
                .dataSource(dataSource)
                .passwordEncoder(passwordEncoder)
                .usersByUsernameQuery(USUARIO_POR_LOGIN)
                .authoritiesByUsernameQuery(PERMISSOES_POR_USUARIO)
                .groupAuthoritiesByUsername(PERMISSOES_POR_GRUPO);
    }
}
*/

/*package org.generation.brazil.eCommerce.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityConfig {

    @Bean
    public PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }

    public static void main(String[] args){
        System.out.println(new BCryptPasswordEncoder().encode("123"));
    }
}*/


